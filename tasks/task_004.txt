# Task ID: 4
# Title: Implement ConciergusMessageList with UIMessage Support
# Status: in-progress
# Dependencies: 1, 2
# Priority: high
# Description: Create message list component optimized for AI SDK 5's UIMessage format with metadata display and enhanced features.
# Details:
1. Update `ConciergusMessageList` for AI SDK 5's UIMessage architecture
2. Support for message metadata display (duration, tokens, model used)
3. Implement reasoning trace and sources display
4. Add support for structured data parts rendering
5. Enhanced TypeScript interfaces:
```typescript
interface ConciergusMessageListProps {
  messages: UIMessage[];
  className?: string;
  messageComponent?: React.ComponentType<ConciergusMessageItemProps>;
  loadingComponent?: React.ReactNode;
  emptyComponent?: React.ReactNode;
  showMetadata?: boolean;
  showReasoningTraces?: boolean;
  virtualizationComponent?: React.ComponentType<VirtualizationProps>;
  [key: string]: any;
}
```
6. Integration with AI SDK 5's Server-Sent Events (SSE)
7. Support for real-time message updates and streaming
8. Enhanced performance with optimized rendering

# Test Strategy:
Test UIMessage rendering with metadata. Verify reasoning traces display correctly. Test streaming updates and real-time message handling. Verify performance with large message lists.

# Subtasks:
## 1. Update Component for UIMessage Architecture [done]
### Dependencies: None
### Description: Modify the message list component to work with AI SDK 5's new UIMessage format and metadata structure.
### Details:
Update component to handle UIMessage format, display message metadata, and support new AI SDK 5 message structure.
<info added on 2025-05-23T15:34:07.058Z>
## UIMessage Integration

1. Update message interface to use UIMessage type
2. Add support for message metadata rendering
3. Implement reasoning trace display
4. Add structured data parts support
5. Support for Server-Sent Events (SSE) streaming

```typescript
interface UIMessage {
  id: string;
  role: 'user' | 'assistant' | 'system';
  content: string;
  parts?: MessagePart[];
  metadata?: {
    duration?: number;
    model?: string;
    totalTokens?: number;
    reasoning?: string[];
    sources?: Source[];
  };
}
```
</info added on 2025-05-23T15:34:07.058Z>
<info added on 2025-05-24T00:26:42.824Z>
## AI SDK 5 UIMessage Structure Research

### Updated UIMessage Definition
```typescript
export type UIMessage = Message & {
  /**
   * The parts of the message. Use this for rendering the message in the UI.
   * Assistant messages can have text, reasoning and tool invocation parts.
   * User messages can have text parts.
   */
  parts: Array<
    | TextUIPart
    | ReasoningUIPart
    | ToolInvocationUIPart
    | SourceUIPart
    | FileUIPart
    | StepStartUIPart
  >;
};
```

### Message Base Interface
```typescript
export interface Message {
  id: string;
  createdAt?: Date;
  content: string; // Still exists but use parts when possible
  role: 'system' | 'user' | 'assistant' | 'data';
  parts?: Array<...>; // Optional on Message, required on UIMessage
}
```

### Part Types
- `TextUIPart`: `{ type: 'text'; text: string; }`
- `ReasoningUIPart`: `{ type: 'reasoning'; reasoning: string; details: Array<...> }`
- `ToolInvocationUIPart`: `{ type: 'tool-invocation'; toolInvocation: ToolInvocation; }`
- `SourceUIPart`: `{ type: 'source'; source: LanguageModelV1Source; }`
- `FileUIPart`: `{ type: 'file'; mimeType: string; data: string; }`
- `StepStartUIPart`: `{ type: 'step-start'; }`

### Implementation Notes
1. UIMessage extends Message but requires `parts` array
2. `content` property still exists for backward compatibility
3. Parts-based rendering is the preferred approach
4. Role is strictly typed: 'system' | 'user' | 'assistant' | 'data'

### Implementation Plan
1. Update ConciergusMessageItem to handle UIMessage.parts
2. Add part-specific rendering logic
3. Maintain backward compatibility with content property
4. Add metadata display capabilities
</info added on 2025-05-24T00:26:42.824Z>
<info added on 2025-05-24T00:29:04.889Z>
## Implementation Complete: UIMessage Architecture Integration

### âœ… Successfully Implemented:

**1. ConciergusMessageItem UIMessage Support:**
- Updated to use UIMessage type from @ai-sdk/react
- Implemented comprehensive parts-based rendering system
- Added support for all AI SDK 5 part types:
  - TextUIPart: Markdown rendering with security
  - ReasoningUIPart: Collapsible reasoning traces with details
  - ToolInvocationUIPart: Tool call/result display
  - SourceUIPart: Citation display with links
  - FileUIPart: File attachment preview (images + binary data)
  - StepStartUIPart: Step boundary markers
  - Custom data parts: Extensible for future part types

**2. Enhanced Metadata Display:**
- Added showMetadata prop for performance metrics
- Display model, duration, tokens, finish reason
- Configurable metadata visibility

**3. Advanced UI Features:**
- showReasoningTraces prop for AI reasoning display
- showSourceCitations prop for RAG source display
- Backward compatibility with content property fallback
- Proper TypeScript compatibility with UIMessage structure

**4. ConciergusMessageList UIMessage Support:**
- Updated to handle UIMessage arrays
- Smart message preview generation from parts
- Fallback to content property for compatibility
- Enhanced grouping and auto-scroll functionality

**5. Security & Performance:**
- Sanitized Markdown rendering with rehype-sanitize
- Secure link handling with target="_blank" and rel="noopener noreferrer"
- Efficient parts-based rendering
- Proper TypeScript type safety

### ðŸŽ¯ Architecture Benefits:
- Full AI SDK 5 Alpha compatibility
- Rich metadata and reasoning display
- Extensible part system for future AI SDK features
- Maintains backward compatibility
- Enterprise-ready observability features

The UIMessage architecture integration is now complete and ready for AI SDK 5 Alpha's advanced message structure and metadata capabilities.
</info added on 2025-05-24T00:29:04.889Z>

## 2. Implement Message Metadata and Reasoning Display [pending]
### Dependencies: 4.1
### Description: Add UI components for displaying message metadata, reasoning traces, and performance metrics.
### Details:
Create components for metadata display, reasoning traces, sources, and other AI SDK 5 message enhancements.
<info added on 2025-05-23T15:35:46.378Z>
## Metadata and Reasoning Display

1. Create `<MessageMetadata />` component:
   - Response time display
   - Token usage information
   - Model identification
   - Cost estimation

2. Implement `<ReasoningTrace />` component:
   - Step-by-step reasoning display
   - Collapsible reasoning sections
   - Syntax highlighting for code reasoning

3. Add `<SourcesDisplay />` component:
   - RAG source citations
   - Clickable source links
   - Source relevance scores

4. Support for custom metadata renderers
</info added on 2025-05-23T15:35:46.378Z>

## 3. Add Server-Sent Events (SSE) Integration [pending]
### Dependencies: 4.2
### Description: Implement real-time message updates using AI SDK 5's Server-Sent Events streaming protocol.
### Details:
Integrate SSE for real-time message streaming, handle partial updates, and ensure smooth user experience.
<info added on 2025-05-23T15:38:13.689Z>
## SSE Integration for Real-time Updates

1. Implement SSE message streaming:
   - Handle partial message updates
   - Support for incremental content rendering
   - Real-time metadata updates

2. Add streaming indicators:
   - Typing indicators for AI responses
   - Progress bars for long operations
   - Real-time token counting

3. Optimize for performance:
   - Efficient DOM updates
   - Minimal re-renders during streaming
   - Smooth scrolling during updates

4. Error handling for SSE:
   - Connection retry logic
   - Fallback to polling if SSE fails
   - User feedback for connection issues
</info added on 2025-05-23T15:38:13.689Z>

## 4. Enhanced TypeScript Interfaces for AI SDK 5 [pending]
### Dependencies: 4.1
### Description: Update all TypeScript interfaces to support AI SDK 5 features, metadata, and enterprise capabilities.
### Details:
Create comprehensive TypeScript interfaces that cover all AI SDK 5 features and provide excellent developer experience.
<info added on 2025-05-23T15:40:31.088Z>
## Enhanced TypeScript Interfaces

```typescript
// Core message interfaces
interface ConciergusMessageListProps {
  messages: UIMessage[];
  showMetadata?: boolean;
  showReasoningTraces?: boolean;
  showSources?: boolean;
  metadataRenderer?: React.ComponentType<MessageMetadataProps>;
  reasoningRenderer?: React.ComponentType<ReasoningTraceProps>;
  sourcesRenderer?: React.ComponentType<SourcesDisplayProps>;
  // ... other props
}

// Metadata interfaces
interface MessageMetadata {
  duration?: number;
  model?: string;
  totalTokens?: number;
  inputTokens?: number;
  outputTokens?: number;
  cost?: number;
  reasoning?: ReasoningStep[];
  sources?: Source[];
}

// Reasoning interfaces
interface ReasoningStep {
  step: number;
  content: string;
  type: 'thinking' | 'analysis' | 'conclusion';
}
```
</info added on 2025-05-23T15:40:31.088Z>

## 5. Performance Optimization and Virtualization Support [pending]
### Dependencies: 4.2, 4.4
### Description: Optimize component performance for large message lists and prepare for advanced virtualization features.
### Details:
Implement performance optimizations, memory management, and prepare architecture for virtualization of large message lists.
<info added on 2025-05-23T15:41:45.234Z>
## Performance Optimization

1. Implement React.memo for message components
2. Add virtualization support for large lists
3. Optimize re-renders during streaming
4. Memory management for long conversations
5. Lazy loading for message attachments

## Virtualization Architecture
- Abstract rendering for future virtualization
- Support for variable height messages
- Efficient scrolling for thousands of messages
- Memory cleanup for offscreen messages
- Integration with AI SDK 5 streaming

## Performance Monitoring
- Bundle size optimization
- Render performance tracking
- Memory usage monitoring
- Streaming performance metrics
</info added on 2025-05-23T15:41:45.234Z>

