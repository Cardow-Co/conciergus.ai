# Task ID: 6
# Title: Implement ConciergusChatInput Component
# Status: pending
# Dependencies: 1, 2
# Priority: high
# Description: Create the chat input component with textarea auto-sizing and integration with Vercel AI SDK's useChat hook.
# Details:
1. Create a `ConciergusChatInput` component using `react-textarea-autosize`
2. Wire props directly to Vercel AI SDK's `useChat` return values
3. Implement TypeScript interface:
```typescript
interface ConciergusChatInputProps {
  input: string;
  handleInputChange: (e: React.ChangeEvent<HTMLTextAreaElement> | string) => void;
  handleSubmit: (e?: React.FormEvent, chatRequestOptions?: any) => void;
  isLoading: boolean;
  placeholder?: string;
  disabled?: boolean;
  className?: string;
  showMicButton?: boolean;
  [key: string]: any; // For ...rest props
}
```
4. Add microphone button that integrates with voice input hook
5. Implement send button with loading state
6. Add keyboard shortcuts (Enter to send, Shift+Enter for new line)
7. Implement character limit and validation
8. Add proper accessibility attributes

# Test Strategy:
Test input changes are correctly handled. Verify form submission works as expected. Test keyboard shortcuts. Verify loading states display correctly. Test with mock voice input hook. Verify accessibility attributes are correctly applied.

# Subtasks:
## 1. Create ConciergusChatInput component with auto-sizing textarea [pending]
### Dependencies: None
### Description: Implement the core component using react-textarea-autosize for auto-resizing functionality.
### Details:
Use react-textarea-autosize to create a textarea that automatically adjusts its height as content changes[1][4][5].

## 2. Integrate Vercel AI SDK useChat hook [pending]
### Dependencies: 6.1
### Description: Wire up component props to Vercel AI SDK's useChat hook return values.
### Details:
Pass input, handleInputChange, handleSubmit, and isLoading props from useChat to the component.

## 3. Implement TypeScript interface and props [pending]
### Dependencies: 6.1
### Description: Define and apply the TypeScript interface for component props.
### Details:
Use the provided interface to type props and handle rest props.

## 4. Add microphone and send buttons with loading state [pending]
### Dependencies: 6.1, 6.2
### Description: Implement microphone button for voice input and send button with loading state.
### Details:
Add microphone button that integrates with a voice input hook and a send button that reflects isLoading state.

## 5. Implement keyboard shortcuts, character limit, and accessibility [pending]
### Dependencies: 6.1, 6.3
### Description: Add keyboard shortcuts, character limit validation, and accessibility attributes.
### Details:
Enable Enter to send, Shift+Enter for new line, character limit validation, and proper ARIA attributes.

