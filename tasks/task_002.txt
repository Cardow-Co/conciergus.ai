# Task ID: 2
# Title: Create ConciergusProvider Context
# Status: done
# Dependencies: 1
# Priority: high
# Description: Implement the optional ConciergusProvider context component that provides global configuration for Conciergus features.
# Details:
1. Create a React context with TypeScript interface for configuration options:
```typescript
interface ConciergusConfig {
  defaultTTSVoice?: string;
  isTTSEnabledByDefault?: boolean;
  ttsApiEndpoint?: string;
  onTextToAudio?: (text: string) => Promise<string | Blob>;
  onProcessRecordedAudio?: (blob: Blob) => Promise<string>;
  proactiveRules?: ProactiveRule[];
  enableDebug?: boolean;
}
```
2. Implement the `ConciergusProvider` component that accepts these configuration options as props
3. Create a `useConciergus` hook to access the context
4. Add debug mode that logs helpful information when `enableDebug` is true
5. Implement proper error handling for missing context usage

# Test Strategy:
Write unit tests to verify that the context correctly provides configuration values to child components. Test that the `useConciergus` hook throws appropriate errors when used outside of a provider. Verify that debug mode correctly logs information when enabled.

# Subtasks:
## 1. Define ConciergusConfig TypeScript Interface [done]
### Dependencies: None
### Description: Create a TypeScript interface named ConciergusConfig that specifies all configuration options required for the Conciergus context.
### Details:
Include properties such as defaultTTSVoice, isTTSEnabledByDefault, ttsApiEndpoint, onTextToAudio, onProcessRecordedAudio, proactiveRules, and enableDebug in the interface.
<info added on 2025-05-23T14:45:14.382Z>
# Define ConciergusConfig TypeScript Interface

## Implementation Plan:
1. Create `src/context/ConciergusContext.tsx` or `src/context/ConciergusProvider.tsx` folder structure.
2. Define `export interface ConciergusConfig { ... }` including configuration options:
   - `apiUrl?: string` - Base URL for API requests
   - `enableDebug?: boolean` - Toggle debug mode for verbose logging
   - `theme?: 'light' | 'dark'` - UI theme preference
   - `initialPrompt?: string` - Default prompt to start conversations
   - `defaultTTSVoice?: string` - Default voice for text-to-speech
   - `isTTSEnabledByDefault?: boolean` - Whether TTS is enabled by default
   - `ttsApiEndpoint?: string` - Endpoint for text-to-speech API
   - `proactiveRules?: ProactiveRule[]` - Rules for proactive suggestions
   - Additional placeholder for future options

3. Add JSDoc/TSDoc comments for each property to provide clear documentation.
4. Export the `ConciergusConfig` interface from the module.
5. Update `README.md` stub to reference configuration options.

## Dependencies: 
None

## Test Strategy:
- Verify that IDE and `tsc` recognize the interface in import contexts.
</info added on 2025-05-23T14:45:14.382Z>
<info added on 2025-05-23T15:01:29.231Z>
I've created the `ConciergusConfig` interface in a new file at `src/context/ConciergusContext.tsx`. The interface includes all the specified properties with TSDoc comments:

```typescript
// src/context/ConciergusContext.tsx

// TODO: Import ProactiveRule from './useProactiveEngagement'
// Placeholder until the ProactiveRule type is implemented
type ProactiveRule = any;

/**
 * Configuration options for the Conciergus assistant
 */
export interface ConciergusConfig {
  /**
   * Default voice to use for text-to-speech functionality
   */
  defaultTTSVoice?: string;
  
  /**
   * Whether text-to-speech is enabled by default
   */
  isTTSEnabledByDefault?: boolean;
  
  /**
   * API endpoint for text-to-speech service
   */
  ttsApiEndpoint?: string;
  
  /**
   * Function to convert text to audio
   * @param text The text to convert to audio
   * @returns Promise resolving to audio as string URL or Blob
   */
  onTextToAudio?: (text: string) => Promise<string | Blob>;
  
  /**
   * Function to process recorded audio and convert to text
   * @param blob The audio blob to process
   * @returns Promise resolving to the transcribed text
   */
  onProcessRecordedAudio?: (blob: Blob) => Promise<string>;
  
  /**
   * Rules for proactive engagement with the user
   */
  proactiveRules?: ProactiveRule[];
  
  /**
   * Enable debug mode for verbose logging
   */
  enableDebug?: boolean;
}
```

I've also updated `src/index.ts` to re-export the context file:

```typescript
// src/index.ts
export * from './context/ConciergusContext';
```

The implementation passes TypeScript compilation and is ready for the next subtask.
</info added on 2025-05-23T15:01:29.231Z>

## 2. Create Conciergus React Context [done]
### Dependencies: 2.1
### Description: Establish a React context using the ConciergusConfig interface, ensuring proper default values and null safety.
### Details:
Use React.createContext with ConciergusConfig | null as the type, and set the default value to null to enforce provider usage.
<info added on 2025-05-23T15:02:24.488Z>
## Exploration & Implementation Plan for Subtask 2.2 â€“ Create Conciergus React Context

1. Open the newly created file `src/context/ConciergusContext.tsx`.
2. Import React and the `ConciergusConfig` interface:
   ```typescript
   import React, { createContext } from 'react';
   import type { ConciergusConfig } from './ConciergusContext';
   ```
3. Create the context with null default to enforce provider usage:
   ```typescript
   /**
    * React context for Conciergus configuration
    * @internal
    */
   export const ConciergusContext = createContext<ConciergusConfig | null>(null);
   ```
4. (Optional) Set a displayName for better debugging in React DevTools:
   ```typescript
   ConciergusContext.displayName = 'ConciergusContext';
   ```
5. Ensure the context is exported from the module:
   ```typescript
   export { ConciergusContext };
   ```
6. Update `src/index.ts` to re-export the context:
   ```typescript
   export { ConciergusContext } from './context/ConciergusContext';
   ```
7. Run `tsc` to verify there are no type errors.

**Next Steps:**
Once the context is created, proceed to Subtask 3 to implement the `ConciergusProvider` component that wraps children with this context.
</info added on 2025-05-23T15:02:24.488Z>

## 3. Implement ConciergusProvider Component [done]
### Dependencies: 2.2
### Description: Develop the ConciergusProvider component that accepts ConciergusConfig as props and supplies the context value to its children.
### Details:
Ensure the provider wraps children and passes the configuration object as the context value.

## 4. Develop useConciergus Hook with Error Handling [done]
### Dependencies: 2.3
### Description: Create a custom useConciergus hook to access the Conciergus context, including error handling for missing provider usage.
### Details:
The hook should throw a descriptive error if the context is null, guiding developers to wrap components with ConciergusProvider.

## 5. Add Debug Mode Logging to Provider [done]
### Dependencies: 2.3
### Description: Implement debug mode in ConciergusProvider to log helpful information when enableDebug is true in the configuration.
### Details:
Integrate conditional logging throughout the provider and context logic to output relevant debug information when enabled.

