# Task ID: 3
# Title: Implement ConciergusChatWidget Component
# Status: done
# Dependencies: 1, 2
# Priority: high
# Description: Create the main chat widget container component using Radix UI Dialog for the modal interface.
# Details:
1. Create a `ConciergusChatWidget` component using Radix UI's Dialog component
2. Implement the component with the following props:
```typescript
interface ConciergusChatWidgetProps {
  isOpen: boolean;
  onOpenChange: (open: boolean) => void;
  className?: string;
  children?: React.ReactNode;
  triggerComponent?: React.ReactNode;
  headerComponent?: React.ReactNode;
  footerComponent?: React.ReactNode;
  [key: string]: any; // For ...rest props
}
```
3. Structure the component to include slots for header, content area, and footer
4. Ensure all Radix UI accessibility features are preserved
5. Pass through className and ...rest props to the root element
6. Add data-* attributes for styling hooks
7. Implement responsive behavior for mobile and desktop views

# Test Strategy:
Test the component renders correctly with various prop combinations. Verify that the dialog opens and closes as expected when isOpen changes. Test that custom trigger, header, and footer components render correctly. Verify accessibility attributes are correctly applied.

# Subtasks:
## 1. Set Up ConciergusChatWidget Component Structure with Radix UI Dialog [done]
### Dependencies: None
### Description: Initialize the ConciergusChatWidget component using Radix UI's Dialog primitives, ensuring the modal structure is in place.
### Details:
Import and configure Dialog.Root, Dialog.Trigger, Dialog.Portal, Dialog.Overlay, and Dialog.Content to establish the modal dialog structure as the container for the chat widget.
<info added on 2025-05-23T15:13:17.863Z>
Create a new `src/components` directory and implement the `ConciergusChatWidget.tsx` component file. Import React and Radix UI Dialog primitives. Define the `ConciergusChatWidgetProps` interface with the following properties: `isOpen`, `onOpenChange`, `className`, `children`, `triggerComponent`, `headerComponent`, `footerComponent`, and a rest parameter for additional props.

Implement the functional component that utilizes Dialog.Root, Dialog.Trigger, Dialog.Portal, Dialog.Overlay, and Dialog.Content from Radix UI to create the modal dialog structure. Structure the component to include header, body, and footer sections with appropriate data attributes for styling hooks. The component should forward the className prop and any additional props to the root Dialog element.

The basic structure should follow:
```tsx
<Dialog.Root open={isOpen} onOpenChange={onOpenChange}>
  <Dialog.Trigger asChild>
    {triggerComponent}
  </Dialog.Trigger>
  <Dialog.Portal>
    <Dialog.Overlay data-chat-widget-overlay />
    <Dialog.Content data-chat-widget-content>
      {headerComponent && <div data-chat-widget-header>{headerComponent}</div>}
      <div data-chat-widget-body>{children}</div>
      {footerComponent && <div data-chat-widget-footer>{footerComponent}</div>}
    </Dialog.Content>
  </Dialog.Portal>
</Dialog.Root>
```

This implementation establishes the foundational structure using accessible Radix Dialog primitives with prop forwarding capabilities.
</info added on 2025-05-23T15:13:17.863Z>

## 2. Implement Props Interface and Propagation [done]
### Dependencies: 3.1
### Description: Apply the ConciergusChatWidgetProps interface, ensuring all props are accepted and correctly passed to the root element.
### Details:
Integrate isOpen, onOpenChange, className, children, triggerComponent, headerComponent, footerComponent, and ...rest props. Pass className and ...rest to the root Dialog element.
<info added on 2025-05-23T15:14:52.921Z>
Create a test file `src/components/ConciergusChatWidget.test.tsx` to verify prop handling and component rendering. Use @testing-library/react and @testing-library/jest-dom for testing. Write tests to verify:

1. Dialog opens correctly when `isOpen={true}` and `onOpenChange` is provided, with proper rendering of overlay and content elements
2. Custom `className` is applied to the root Dialog.Root element
3. Extra props from `...rest` are properly passed to the root element
4. `triggerComponent` renders correctly inside Dialog.Trigger
5. `headerComponent`, `children`, and `footerComponent` render in their designated slots with appropriate data attributes

Ensure all props defined in ConciergusChatWidgetProps are properly received and propagated through the component hierarchy.
</info added on 2025-05-23T15:14:52.921Z>

## 3. Slot and Render Header, Content, and Footer Areas [done]
### Dependencies: 3.2
### Description: Structure the component to render headerComponent, content area (children), and footerComponent in their respective slots within the dialog.
### Details:
Ensure headerComponent is rendered at the top, children in the main content area, and footerComponent at the bottom of the dialog.
<info added on 2025-05-23T15:16:53.860Z>
Implemented the component structure in ConciergusChatWidget.tsx with proper content organization. The Dialog.Content now includes three distinct sections with appropriate data attributes:
- Header section (data-chat-widget-header) that conditionally renders the headerComponent
- Body section (data-chat-widget-body) that renders the children
- Footer section (data-chat-widget-footer) that conditionally renders the footerComponent

These data attributes provide styling hooks for each section while maintaining the required component hierarchy.
</info added on 2025-05-23T15:16:53.860Z>

## 4. Ensure Accessibility and Add Data Attributes [done]
### Dependencies: 3.3
### Description: Preserve all Radix UI accessibility features and add data-* attributes for styling hooks.
### Details:
Verify focus management, ARIA attributes, and keyboard navigation. Add data attributes (e.g., data-chat-widget) to key elements for styling.
<info added on 2025-05-23T15:17:43.125Z>
To enhance accessibility and provide consistent styling hooks:

1. Preserve Radix UI's built-in accessibility features:
   - Focus trapping within the dialog
   - Keyboard navigation (Tab order)
   - Escape key to close dialog

2. Add the following data attributes:
   - `data-chat-widget-root` on the `<Dialog.Root>` component
   - `data-chat-widget-trigger` on the trigger wrapper element
   - Retain existing data attributes on Overlay, Content, Header, Body, and Footer

3. Implementation steps:
   - Update `src/components/ConciergusChatWidget.tsx` to include these data attributes
   - Ensure all interactive elements are keyboard accessible
   - Test tab navigation flow through the widget
   - Verify screen reader announcements work correctly

4. No manual ARIA attribute configuration needed as Radix UI handles this internally.
</info added on 2025-05-23T15:17:43.125Z>

## 5. Implement Responsive Design for Mobile and Desktop [done]
### Dependencies: 3.4
### Description: Add responsive styles and logic to ensure the chat widget displays optimally on both mobile and desktop devices.
### Details:
Apply CSS or utility classes to adjust layout, sizing, and interactions based on viewport size.
<info added on 2025-05-23T15:25:41.602Z>
Responsive behavior has been implemented using `useState` and `useEffect` to track viewport width (`window.innerWidth < 768`). 

Three style objects were defined:
- `overlayStyle`: Controls the overlay appearance
- `mobileContentStyle`: Formats content as a full-width bottom sheet on mobile
- `desktopContentStyle`: Formats content as a centered modal on desktop

The implementation updates `<Dialog.Overlay>` with `style={overlayStyle}` and `<Dialog.Content>` with conditional styling using `style={isMobile ? mobileContentStyle : desktopContentStyle}`.

Testing confirmed the chat widget correctly adapts its layout based on viewport size, displaying as a full-width bottom sheet on mobile devices and as a centered modal on desktop.
</info added on 2025-05-23T15:25:41.602Z>

